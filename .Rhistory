subsetted file")
}
readr::write_csv(count_by_type,file = paste0("Output/",
"subsetted_states_tallied/",
tools::file_path_sans_ext(
basename(input_file_name)),
"_",
"cities",
"_",
"counties",
"_",
"counts",
".csv"))
}
source("~/analyze_apple_covid_mobility/analyze_apple_covid_mobility_dataset/code/functions/tally_state_cities_counties.R")
library(readr)
library(tidyr)
library(readr)
library(tidyr)
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_mobility_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we now want to convert the data from wide to long
# continuing from the function that subsetted the mobility data to state
convert_mobility_wide_to_long <- function(input_subsetted_mobility_data,
state_to_subset) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_mobility_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# check that the subsetted data actually has data in it
# is (nrow(count_cities_countries) == 0) {
# stop("ERROR: no rows matching given state name. Did you make a mistake?")
# save the state data to a new csv file in the output directory
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subset_state_file)),
"_",
"long",
"_",
"format",
".csv"))
}
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subset_state_file)),
"_",
"long",
"_",
"format",
".csv"))
convert_mobility_wide_to_long <- function(input_subsetted_mobility_data,
state_to_subset) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_mobility_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
library(readr)
library(tidyr)
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
for (state in states) {
convert_mobility_wide_to_long(
input_subsetted_mobility_data = paste0("output/subsetted_states_long/",
state,
".csv"),
state_to_subset = state)
}
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
for (state in states) {
convert_mobility_wide_to_long(
input_subsetted_mobility_data = paste0("output/subsetted_states_long/",
state,
".csv"),
state_to_subset = state)
}
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
for (state in states) {
convert_mobility_wide_to_long(
input_subsetted_mobility_data = paste0("output/subsetted_states_long/",
state,
".csv"),
state_to_subset = state)
}
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
for (state in states) {
convert_mobility_wide_to_long(
input_subsetted_mobility_data = paste0("output/subsetted_states_long/",
state,
".csv"),
state_to_subset = state)
}
load("dplyr")
source("code/02_count_up_counties_cities.R")
tally_state_cities_counties <- function(input_state_file,
state_we_subset) {
# load in the dataset from the previous script
state_data <- readr::read_csv(input_state_name)
# starting off with dplyr chains
count_by_type <- state_data %>%
select(geo_type, region, transportation_type) %>%
group_by(geo_type, transportation_type) %>%
tally()
# check subsetted data has data in it
if (nrow(count_by_type) > 6) {
stop("ERROR, rows exceed data values created. Did you load the right
subsetted file")
}
readr::write_csv(count_by_type,file = paste0("Output/",
"subsetted_states_tallied/",
tools::file_path_sans_ext(
basename(input_file_name)),
"_",
"cities",
"_",
"counties",
"_",
"counts",
".csv"))
}
# the goal of this script is to use the dplyr package to count up the
# number of cities and counties in a given state that have detailed
# Apple mobility data available and then eventually to save it to a csv
# Muhammed Hamir
# September 27th 2021
# mfhamir@dons.usfca.edu
# load the package "dplyr"
library("dplyr")
# we would like to get the count of the number of cities and the
# number of counties in a given state that have driving mobility
# data. The input to this will be the output of the previous script
# namely the state csv files that were already subsetted
# load in the dataset from the previous script
count_cities_counties_state <- function(input_state_file) {
state_data <- readr::read_csv(input_state_file)
# starting off with dplyr chains
count_by_type <- state_data %>%
select(geo_type, region, transportation_type) %>%
group_by(geo_type, transportation_type) %>%
tally()
# check subsetted data has data in it
if (nrow(count_by_type) > 6) {
stop("ERROR, rows exceed data values created. Did you load the right
subsetted file")
}
# write out the result of the dplyr chain
readr::write_csv(count_by_type, file = paste0("output/",
"subsetted_states_tallied/",
tools::file_path_sans_ext(
basename(input_state_file)),
"_",
"tally",
"_",
"counties",
"_",
"cities",
".csv"))
}
# test the function
count_cities_counties_state(input_state_file = paste0("output/",
"subsetted_states_tallied/",
"applemobilitytrends-2021-09-26.csv_Arizona.csv"))
source("code/functions/tally_state_cities_counties.R")
count_cities_counties_state(input_state_file = paste0("output/",
"subsetted_states_tallied/",
"applemobilitytrends-2021-09-26.csv_Arizona.csv"))
source("code/functions/tally_state_cities_counties.R")
source("code/functions/tally_state_cities_counties.R")
count_cities_counties_state(input_state_file = paste0("output/",
"subsetted_states_tallied/",
"applemobilitytrends-2021-09-26.csv_Arizona.csv"))
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_tallied/applemobilitytrends-2021-09-26.csv_Arizona.csv"))
subset_mobility_data_to_state <- function(input_file_name,
state_to_subset) {
# read in the compete csv file
covid_data <- readr::read_csv(file = input_file_name)
# subset the dataset to only include the sub.region column has
# the state name in it. but we want all columns.
state_data <- covid_data %>%
dplyr::filter(`sub-region` == state_to_subset)
# sanitze state name for output files
states_no_spaces <- gsub(state_to_subset,
pattern = " ",
replacement = "_")
# check that the subsetted data actually has data in it
if (nrow(state_data) == 0) {
stop("ERROR, no rows matching given state name. Did you make a typo?")
}
# save the state data to a new csv file in the output directory
readr::write_csv(state_data, file = paste0("output/",
"subsetted_states_wide/",
tools::file_path_sans_ext(
basename(input_file_name)),
"_",
states_no_spaces,
".csv"))
}
source("code/functions/subset_mobility_data_to_state.R")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_tallied/applemobilitytrends-2021-09-26.csv_Arizona.csv"))
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_tallied/applemobilitytrends-2021-09-26.csv_Arizona.csv"))
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv"))
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv"))
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = paste0("output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv"))
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
View(convert_to_long)
View(convert_to_long)
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
# continuing from the function that subsetted the mobility data to state
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# check that the subsetted data actually has data in it
# is (nrow(count_cities_countries) == 0) {
# stop("ERROR: no rows matching given state name. Did you make a mistake?")
# save the state data to a new csv file in the output directory
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subsetted_data)),
"_",
"long",
"_",
"format",
".csv"))
}
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
source("code/functions/subset_mobility_data_to_state.R")
source("code/functions/tally_state_cities_counties.R")
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we now want to convert the data from wide to long
# continuing from the function that subsetted the mobility data to state
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# check that the subsetted data actually has data in it
# is (nrow(count_cities_countries) == 0) {
# stop("ERROR: no rows matching given state name. Did you make a mistake?")
# save the state data to a new csv file in the output directory
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subsetted_data)),
"_",
"long",
"_",
"format",
".csv"))
}
View(convert_to_long)
# load the package "readr" and "tidyr"
library("readr")
library("tidyr")
source("code/functions/subset_mobility_data_to_state.R")
source("code/functions/convert_mobility_wide_to_long.R")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
source("code/functions/subset_mobility_data_to_state.R")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
source("code/functions/subset_mobility_data_to_state.R")
source("code/functions/tally_state_cities_counties.R")
source("code/functions/convert_mobility_wide_to_long.R")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
subset_mobility_data_to_state(
input_file_name = "data/raw_data/applemobilitytrends-2021-09-19.csv",
state_to_subset = "Kansas")
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# check that the subsetted data actually has data in it
# is (nrow(count_cities_countries) == 0) {
# stop("ERROR: no rows matching given state name. Did you make a mistake?")
# save the state data to a new csv file in the output directory
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subsetted_data)),
"_",
"long",
"_",
"format",
".csv"))
}
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
library("readr")
library("tidyr")
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subsetted_data)),
"_",
"long",
"_",
"format",
".csv"))
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library("readr")
library("tidyr")
# we now want to convert the data from wide to long
# continuing from the function that subsetted the mobility data to state
convert_to_long <- function(input_subsetted_data) {
# read  in complete csv file
read_state <- readr::read_csv(input_subsetted_data)
# starting off with dplyr chains
long_state_data <- tidyr::pivot_longer(read_state,
cols = starts_with("202"),
names_to = "date",
values_to = "relative_mobility")
# check that the subsetted data actually has data in it
# is (nrow(count_cities_countries) == 0) {
# stop("ERROR: no rows matching given state name. Did you make a mistake?")
# save the state data to a new csv file in the output directory
readr::write_csv(long_state_data, file = paste0("output/",
"subsetted_states_long/",
tools::file_path_sans_ext(
basename(
input_subsetted_data)),
"_",
"long",
"_",
"format",
".csv"))
}
# The goal of this script is to use the readr and tidyr packages in order to
# convert the mobility data from wide to long.
# Muhammed Hamir
# October 9th, 2021
# mfhamir@dons.usfca.edu
# load the package "readr" and "tidyr"
library(readr)
library(tidyr)
# we would like to convert mobility data from wide to long
source("code/functions/convert_mobility_wide_to_long.R")
states <- c("Delaware", "Alabama", "Nevada", "Ohio", "Texas")
# test out the use of this function
convert_to_long(
input_subsetted_data = "output/subsetted_states_wide/applemobilitytrends-2021-09-19_Kansas.csv")
